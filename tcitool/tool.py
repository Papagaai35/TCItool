"""Author: Daan Gommers"""

import warnings

import numpy as np
import xarray as xr

from tcitool import *

class Tool(object):
    """
    Attributes:
        data: a DataStore containing all atmospheric data points.
    """
    def __init__(self):
        self.data = DataStore()
        self.generator_registry = GeneratorRegistry(self)
        self.calculators = {
            'demo': Calculator,
            'windchill_jagti': WindChill_JAGTICalculator
        }
        self.options = {}
        self._selfassert()

    def _selfassert(self):
        for calc_name, calc in self.calculators.items():
            assert issubclass(calc,Calculator)

    def require_data(self,*args,operation_name=""):
        missing_params = {}
        for param in args:
            if not param in self.data:
                r = self.generator_registry.find_and_run(param)
                if r is None:
                    missing_params[param] = []
                if r is False:
                    missing_params[param] = (
                        self.generator_registry.generators[param])
        if len(missing_params) > 0:
            msg = (
                "The following parameters are nessesary to preform " +
                (operation_name if operation_name=="" else "this operation") +
                ", but unavailable. Some may be generated by the parameters " +
                "indicated\n")
            for mp,gens in missing_params.items():
                msg += '- '+mp
                for gen in gens:
                    gen_missing_params = list(filter(
                        lambda param: param not in self.data,
                        gen['requires']))
                    gen_missing_params += list(map(
                        lambda opt: '[opt]'+opt,
                        filter(lambda opt: opt not in self.options,
                               gen['options'])))
                    msg += '--- '+", ".join(gen_missing_params)
            raise MissingDataError(msg)

    def has_options(self,*args):
        return all(map(lambda opt: opt in self.options,args))

    def calculate(self,*args):
        calculator_objs = {}
        missing_calculators = []
        for calc_name in args:
            if calc_name in self.calculators:
                calc_obj = self.calculators[calc_name](self)
                calc_obj.run()
                calculator_objs[calc_name] = calc_obj
            else:
                missing_calculators.append(calc_name)
                calculator_objs[calc_name] = None
        if len(missing_calculators) > 0:
            warning_msg = ('The calculator(s) [%s] could not be found.\n'
                'Available calculators are [%s].')
            warnings.warn(warning_msg%(",".join(missing_calculators),
                                       ",".join(self.calculators.keys())),
                          UnknownCalculatorWarning)
        return calculator_objs
